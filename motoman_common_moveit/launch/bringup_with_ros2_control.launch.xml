<!--
Copyright (c) 2024, Stogl Robotics Consulting UG (haftungsbeschrÃ¤nkt)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Source of this file are templates in https://github.com/StoglRobotics/ros_team_workspace repository.
-->


<launch>
  <!-- Declare launch arguments -->
  <arg name="robot_name"
       default="motoman"
       description="Name of the robot or application for unique identification."/>
  <arg name="prefix"
       default=""
       description="Prefix of the joint names, useful for multi-robot setup."/>
  <arg name="joints_with_suffix"
       default="false"
       description="Whether the joint names have a suffix."/>
  <arg name="description_package"
       default="motoman_gp250_support"
       description="Description package with robot URDF/xacro files."/>
  <arg name="description_macro_file"
       default="gp250_macro.xacro"
       description="URDF/XACRO description file of the robot or application."/>
  <arg name="use_mock_hardware"
       default="true"
       description="Start robot with fake hardware mirroring command to its states."/>
  <arg name="sim_gazebo"
       default="true"
       description="Simulate the robot in Gazebo"/>
  <arg name="controllers_file_path"
       default="$(find-pkg-share motoman_ros2_control_support)/config/motoman_6dof_controllers.yaml"
       description="YAML file with the controllers configuration."/>
  <arg name="semantic_description_file_path"
       default="$(find-pkg-share motoman_common_moveit)/srdf/common_motoman.srdf.xacro"
       description="Semantic robot description file (SRDF/XACRO) of the robot or application."/>
  <arg name="moveit_controllers_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/moveit_controllers.yaml"
       description="YAML file with the controllers configuration for MoveIt."/>
  <arg name="move_group_config_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/move_group_config.yaml"
       description="YAML file with the move_group configuration."/>
  <arg name="kinematics_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/kinematics.yaml"
       description="YAML file with the kinematics configuration."/>
  <arg name="ompl_planning_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/ompl_planning.yaml"
       description="YAML file with the OMPL planning configuration."/>
  <arg name="pilz_planning_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/pilz_planning.yaml"
       description="YAML file with the Pilz planning configuration."/>
  <arg name="stomp_planning_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/stomp_planning.yaml"
       description="YAML file with the STOMP planning configuration."/>
  <arg name="pilz_cartesian_limits_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/pilz_cartesian_limits.yaml"
       description="YAML file with the Pilz cartesian limits configuration."/>
  <arg name="joint_limits_file_path"
       default="$(find-pkg-share motoman_common_moveit)/config/joint_limits.yaml"
       description="YAML file with the joint limits configuration."/>
  <arg name="rviz_file_path"
       default="$(find-pkg-share motoman_common_moveit)/rviz/moveit.rviz"
       description="Rviz2 configuration file of the visualization."/>
  <arg name="activate_ros2_control"
       default="true"
       description="Decide if this file should also start ros2_control stack and activate controllers."/>

  <!-- Load robot description -->
  <let name="robot_description_content"
       value="$(command '$(find-exec xacro) $(find-pkg-share motoman_ros2_control_support)/urdf/common_motoman.xacro \
                robot_name:=$(var robot_name) \
                prefix:=$(var prefix) \
                joints_with_suffix:=$(var joints_with_suffix) \
                description_package:=$(var description_package) \
                description_macro_file:=$(var description_macro_file) \
                use_mock_hardware:=$(var use_mock_hardware) \
                sim_gazebo:=$(var sim_gazebo) \
                simulation_controllers:=$(var controllers_file_path)')"/>

  <!-- Publish TF -->
  <node pkg="robot_state_publisher" exec="robot_state_publisher" name="robot_state_publisher_node" output="both">
    <param name="robot_description" value="$(var robot_description_content)"/>
    <param name="use_sim_time" value="$(var sim_gazebo)"/>
  </node>

  <!-- ros2_control node -->
  <node pkg="controller_manager" exec="ros2_control_node" output="screen" unless="$(var sim_gazebo)">
    <param from="$(var controllers_file_path)"/>
    <param name="robot_description" value="$(var robot_description_content)"/>
    <remap from="/position_trajectory_controller/follow_joint_trajectory/_action/feedback"
           to="/follow_joint_trajectory/_action/feedback"/>
    <remap from="/position_trajectory_controller/follow_joint_trajectory/_action/status"
           to="/follow_joint_trajectory/_action/status"/>
    <remap from="/position_trajectory_controller/follow_joint_trajectory/_action/cancel_goal"
           to="/follow_joint_trajectory/_action/cancel_goal"/>
    <remap from="/position_trajectory_controller/follow_joint_trajectory/_action/get_result"
           to="/follow_joint_trajectory/_action/get_result"/>
    <remap from="/position_trajectory_controller/follow_joint_trajectory/_action/send_goal"
           to="/follow_joint_trajectory/_action/send_goal"/>
  </node>

  <!-- Spawn controllers -->
  <group if="$(var activate_ros2_control)">
    <node pkg="controller_manager" exec="spawner" args="position_trajectory_controller" >
     <param name="use_sim_time" value="$(var sim_gazebo)"/>
    </node>
    <node pkg="controller_manager" exec="spawner" args="admittance_controller --inactive" >
     <param name="use_sim_time" value="$(var sim_gazebo)"/>
    </node>
    <node pkg="controller_manager" exec="spawner" args="joint_state_broadcaster" >
     <param name="use_sim_time" value="$(var sim_gazebo)"/>
    </node>
    <node pkg="controller_manager" exec="spawner" args="force_torque_sensor_broadcaster" >
     <param name="use_sim_time" value="$(var sim_gazebo)"/>
    </node>
  </group>

  <!-- Load MoveIt Configuration -->
  <let name="robot_description_semantic_content"
       value="$(command '$(find-exec xacro) $(var semantic_description_file_path) \
                robot_name:=$(var robot_name) \
                prefix:=$(var prefix)')"/>

  <!-- MoveIt node -->
  <node pkg="moveit_ros_move_group" exec="move_group" output="screen">
    <param name="robot_description" value="$(var robot_description_content)"/>
    <param name="robot_description_semantic" value="$(var robot_description_semantic_content)"/>
    <param from="$(var move_group_config_file_path)"/>
    <param from="$(var ompl_planning_file_path)"/>
    <param from="$(var pilz_planning_file_path)"/>
    <param from="$(var stomp_planning_file_path)"/>
    <param from="$(var pilz_cartesian_limits_file_path)"/>
    <param from="$(var joint_limits_file_path)"/>
    <param from="$(var moveit_controllers_file_path)"/>
    <param from="$(var kinematics_file_path)"/>
    <param name="use_sim_time" value="$(var sim_gazebo)"/>
  </node>

  <!-- RViz2 -->
  <node pkg="rviz2" exec="rviz2" name="rviz2" output="log" args="-d $(var rviz_file_path)">
    <param name="robot_description" value="$(var robot_description_content)"/>
    <param name="robot_description_semantic" value="$(var robot_description_semantic_content)"/>
    <param from="$(var kinematics_file_path)"/>
    <param from="$(var ompl_planning_file_path)"/>
    <param name="default_planning_pipeline" value="ompl"/>
    <param name="use_sim_time" value="$(var sim_gazebo)"/>
  </node>

</launch>
